main.c:14:6: warning: disable inline expansion
void f_DOT() {
     ^
main.c:15:19: note: macro prevent inlining
  struct A A1 = { DOT X [ 4 ... 6 ] = 5 };
                  ^
main.c:1:13: note: expanded from macro 'DOT'
#define DOT .
            ^
main.c:18:6: warning: disable inline expansion
void f_L() {
     ^
main.c:19:23: note: macro prevent inlining
  struct A A1 = { . X L 4 ... 6 ] = 5 };
                      ^
main.c:2:11: note: expanded from macro 'L'
#define L [
          ^
main.c:22:6: warning: disable inline expansion
void f_R() {
     ^
main.c:23:33: note: macro prevent inlining
  struct A A1 = { . X [ 4 ... 6 R = 5 };
                                ^
main.c:3:11: note: expanded from macro 'R'
#define R ]
          ^
main.c:26:6: warning: disable inline expansion
void f_EQ() {
     ^
main.c:27:15: note: macro prevent inlining
  struct A A1 EQ { . X [ 4 ... 6 ] = 5 };
              ^
main.c:4:9: note: expanded from here
#define EQ =
        ^
main.c:30:6: warning: disable inline expansion
void f_RANGE() {
     ^
main.c:31:27: note: macro prevent inlining
  struct A A1 = { . X [ 4 RANGE 6 ] = 5 };
                          ^
main.c:5:15: note: expanded from macro 'RANGE'
#define RANGE ...
              ^
main.c:34:6: warning: disable inline expansion
void f_4() {
     ^
main.c:35:25: note: macro prevent inlining
  struct A A1 = { . X [ _4 ... 6 ] = 5 };
                        ^
main.c:6:12: note: expanded from macro '_4'
#define _4 4
           ^
main.c:38:6: warning: disable inline expansion
void f_6() {
     ^
main.c:39:31: note: macro prevent inlining
  struct A A1 = { . X [ 4 ... _6 ] = 5 };
                              ^
main.c:7:12: note: expanded from macro '_6'
#define _6 6
           ^
main.c:42:6: warning: disable inline expansion
void f_5() {
     ^
main.c:43:37: note: macro prevent inlining
  struct A A1 = { . X [ 4 ... 6 ] = _5 };
                                    ^
main.c:8:12: note: expanded from macro '_5'
#define _5 5
           ^
8 warnings generated.
